"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ç–æ–±–∞—Ç–ª –±–æ—Ç–∞
"""
import asyncio
from datetime import datetime, timedelta
import logging

logger = logging.getLogger(__name__)


def format_time_ago(timestamp):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ "2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥"
    """
    now = datetime.now()
    diff = now - timestamp
    
    if diff < timedelta(minutes=1):
        return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
    elif diff < timedelta(hours=1):
        minutes = int(diff.total_seconds() / 60)
        return f"{minutes} –º–∏–Ω –Ω–∞–∑–∞–¥"
    elif diff < timedelta(days=1):
        hours = int(diff.total_seconds() / 3600)
        return f"{hours} —á –Ω–∞–∑–∞–¥"
    elif diff < timedelta(days=7):
        days = diff.days
        return f"{days} –¥–Ω –Ω–∞–∑–∞–¥"
    else:
        return timestamp.strftime("%d.%m.%Y")


def format_number(number):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
    """
    return f"{number:,}".replace(",", " ")


def validate_photo(photo_file):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Ñ–æ—Ç–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±–∞—Ç–ª–∞
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
    if photo_file.file_size > 10 * 1024 * 1024:  # 10 MB
        return False, "–§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (–º–∞–∫—Å 10 –ú–ë)"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –∏–ª–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ)
    if photo_file.width > photo_file.height * 1.2:
        return False, "–§–æ—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–º –∏–ª–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–º"
    
    return True, "OK"


def get_battle_status_emoji(votes1, votes2):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–∞—Ç–ª–∞
    """
    if votes1 == votes2:
        return "‚öñÔ∏è"
    elif votes1 > votes2:
        return "‚óÄÔ∏è"
    else:
        return "‚ñ∂Ô∏è"


def generate_leaderboard(users_data, limit=10):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
    """
    leaderboard = "üèÜ –¢–ê–ë–õ–ò–¶–ê –õ–ò–î–ï–†–û–í\n\n"
    
    for idx, user in enumerate(users_data[:limit], 1):
        emoji = "ü•á" if idx == 1 else "ü•à" if idx == 2 else "ü•â" if idx == 3 else f"{idx}."
        username = user.get('username', '–ê–Ω–æ–Ω–∏–º')
        votes = user.get('votes', 0)
        leaderboard += f"{emoji} @{username} ‚Äî {votes} –≥–æ–ª–æ—Å–æ–≤\n"
    
    return leaderboard


def create_progress_bar(current, total, length=10):
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
    """
    filled = int((current / total) * length)
    bar = "‚ñà" * filled + "‚ñë" * (length - filled)
    percentage = int((current / total) * 100)
    return f"{bar} {percentage}%"


async def send_mass_message(bot, user_ids, message, delay=0.1):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    """
    success = 0
    failed = 0
    
    for user_id in user_ids:
        try:
            await bot.send_message(chat_id=user_id, text=message)
            success += 1
            await asyncio.sleep(delay)  # –ó–∞—â–∏—Ç–∞ –æ—Ç rate limit
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            failed += 1
    
    return success, failed


def calculate_win_rate(wins, total_battles):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥
    """
    if total_battles == 0:
        return 0
    return round((wins / total_battles) * 100, 1)


def get_rank_emoji(position):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ —Ä–∞–Ω–≥–∞ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
    """
    ranks = {
        1: "ü•á",
        2: "ü•à", 
        3: "ü•â",
    }
    return ranks.get(position, "üèÖ")


def format_duration(seconds):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
    """
    if seconds < 60:
        return f"{seconds} —Å–µ–∫"
    elif seconds < 3600:
        return f"{seconds // 60} –º–∏–Ω"
    elif seconds < 86400:
        hours = seconds // 3600
        minutes = (seconds % 3600) // 60
        return f"{hours} —á {minutes} –º–∏–Ω"
    else:
        days = seconds // 86400
        hours = (seconds % 86400) // 3600
        return f"{days} –¥–Ω {hours} —á"


def sanitize_username(username):
    """
    –û—á–∏—â–∞–µ—Ç username –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    """
    if not username:
        return "–ê–Ω–æ–Ω–∏–º"
    
    # –£–¥–∞–ª—è–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
    username = username.lstrip('@')
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    if len(username) > 32:
        username = username[:32]
    
    return username


def chunk_list(lst, n):
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞ —á–∞–Ω–∫–∏ –ø–æ n —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    """
    for i in range(0, len(lst), n):
        yield lst[i:i + n]


def get_battle_result_text(photo1_votes, photo2_votes):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±–∞—Ç–ª–∞
    """
    total = photo1_votes + photo2_votes
    
    if total == 0:
        return "–ù–µ—Ç –≥–æ–ª–æ—Å–æ–≤"
    
    if photo1_votes > photo2_votes:
        percentage = round((photo1_votes / total) * 100)
        return f"–ü–æ–±–µ–¥–∞ –ª–µ–≤–æ–≥–æ —Ñ–æ—Ç–æ ({percentage}%)"
    elif photo2_votes > photo1_votes:
        percentage = round((photo2_votes / total) * 100)
        return f"–ü–æ–±–µ–¥–∞ –ø—Ä–∞–≤–æ–≥–æ —Ñ–æ—Ç–æ ({percentage}%)"
    else:
        return "–ù–∏—á—å—è"


def is_valid_telegram_id(telegram_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å Telegram ID
    """
    try:
        tid = int(telegram_id)
        return 0 < tid < 10000000000  # Telegram ID –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    except (ValueError, TypeError):
        return False


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
def handle_errors(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ —Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö
    """
    async def wrapper(*args, **kwargs):
        try:
            return await func(*args, **kwargs)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ {func.__name__}: {e}", exc_info=True)
            # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    return wrapper


def admin_only(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞
    """
    async def wrapper(update, context, *args, **kwargs):
        from database import Database
        db = Database()
        
        user_id = update.effective_user.id
        if not db.is_admin(user_id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
        
        return await func(update, context, *args, **kwargs)
    return wrapper


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
EMOJI_FIRE = "üî•"
EMOJI_PHOTO = "üì∏"
EMOJI_TROPHY = "üèÜ"
EMOJI_CROWN = "üëë"
EMOJI_STAR = "‚≠ê"
EMOJI_CHECK = "‚úÖ"
EMOJI_CROSS = "‚ùå"
EMOJI_WARNING = "‚ö†Ô∏è"
EMOJI_INFO = "‚ÑπÔ∏è"
EMOJI_LOADING = "‚è≥"


# –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π
MESSAGE_TEMPLATES = {
    'welcome': """
üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ñ–æ—Ç–æ–±–∞—Ç–ª!

üì∏ –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è —É—á–∞—Å—Ç–∏—è
üî• –ì–æ–ª–æ—Å—É–π –∑–∞ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è —Ñ–æ—Ç–æ
üéÅ –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã
""",
    
    'photo_received': """
‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!

–û–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∞–¥–º–∏–Ω–∞–º.
–°–∫–æ—Ä–æ —Ç—ã —É–∑–Ω–∞–µ—à—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç!
""",
    
    'photo_approved': """
üéâ –¢–≤–æ–µ —Ñ–æ—Ç–æ –æ–¥–æ–±—Ä–µ–Ω–æ!

–û–Ω–æ –±—É–¥–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ä–∞—É–Ω–¥–µ.
–°–ª–µ–¥–∏ –∑–∞ –∫–∞–Ω–∞–ª–æ–º!
""",
    
    'photo_rejected': """
üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–≤–æ–µ —Ñ–æ—Ç–æ –Ω–µ –ø—Ä–æ—à–ª–æ –º–æ–¥–µ—Ä–∞—Ü–∏—é.

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –ù–µ –≤–∏–¥–Ω–æ –ª–∏—Ü–∞
‚Ä¢ –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è
‚Ä¢ –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ

–ü–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ!
""",
    
    'round_started': """
üî• –ù–û–í–´–ô –†–ê–£–ù–î –ù–ê–ß–ê–õ–°–Ø!

–û—Ç–ø—Ä–∞–≤–ª—è–π —Å–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è —É—á–∞—Å—Ç–∏—è!
–£—Å–ø–µ–π –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫!
""",
    
    'voting_reminder': """
‚ö°Ô∏è –ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!

–ó–∞–π–¥–∏ –≤ –∫–∞–Ω–∞–ª –∏ –ø–æ–¥–¥–µ—Ä–∂–∏ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è —Ñ–æ—Ç–æ.
–¢–≤–æ–π –≥–æ–ª–æ—Å –≤–∞–∂–µ–Ω!
"""
}


if __name__ == "__main__":
    # –¢–µ—Å—Ç—ã
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ç–∏–ª–∏—Ç...")
    
    # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    past = datetime.now() - timedelta(hours=2)
    print(f"–í—Ä–µ–º—è –Ω–∞–∑–∞–¥: {format_time_ago(past)}")
    
    # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª
    print(f"–ß–∏—Å–ª–æ: {format_number(1234567)}")
    
    # –¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞
    print(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {create_progress_bar(7, 10)}")
    
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
