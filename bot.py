import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ChatMember, InputMediaPhoto
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from telegram.error import TelegramError
from database import Database
import config
import asyncio
from datetime import datetime, timedelta
import pytz

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

db = Database()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–∏–∑–∞
CURRENT_PRIZE = "777‚ÇΩ –∏–ª–∏ 350‚≠ê"

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ú–æ—Å–∫–≤—ã
MSK = pytz.timezone('Europe/Moscow')

class PhotoBattleBot:
    def __init__(self):
        self.app = Application.builder().token(config.BOT_TOKEN).build()
        self.setup_handlers()
        self.round_tasks = {}
        self.round_end_times = {}
    
    def setup_handlers(self):
        # –ö–æ–º–∞–Ω–¥—ã
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("admin", self.admin_panel))
        self.app.add_handler(CommandHandler("start_round", self.start_round))
        self.app.add_handler(CommandHandler("next_round", self.next_round))
        self.app.add_handler(CommandHandler("end_battle", self.end_battle))
        self.app.add_handler(CommandHandler("stats", self.stats))
        self.app.add_handler(CommandHandler("set_prize", self.set_prize))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
        self.app.add_handler(MessageHandler(filters.PHOTO, self.handle_photo))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –º–µ–Ω—é)
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
        
        # Callback –∫–Ω–æ–ø–∫–∏
        self.app.add_handler(CallbackQueryHandler(self.handle_callback))
    
    def get_main_menu(self):
        """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤–Ω–∏–∑—É"""
        keyboard = [
            [KeyboardButton("üî• –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ"), KeyboardButton("üé§ –ø–æ–ª—É—á–∏—Ç—å –≥–æ–ª–æ—Å–∞")],
            [KeyboardButton("üë§ –ø—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("üí¨ –ø–æ–º–æ—â—å")]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    def get_admin_menu(self):
        """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        keyboard = [
            [InlineKeyboardButton("üéÆ –ù–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥", callback_data="admin_start_round")],
            [InlineKeyboardButton("‚è≠ –°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥", callback_data="admin_next_round")],
            [InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –±–∞—Ç–ª", callback_data="admin_end_battle")],
            [InlineKeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–∑", callback_data="admin_set_prize")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤", callback_data="admin_list")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    async def check_subscription(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
        try:
            member = await self.app.bot.get_chat_member(config.CHANNEL_ID, user_id)
            return member.status in [ChatMember.MEMBER, ChatMember.ADMINISTRATOR, ChatMember.OWNER]
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}: {e}")
            return False
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π"""
        user = update.effective_user
        args = context.args
        
        referrer_id = None
        if args and args[0].startswith('ref'):
            try:
                referrer_id = int(args[0].replace('ref', ''))
                if referrer_id == user.id:
                    referrer_id = None
            except ValueError:
                pass
        
        db.add_user(user.id, user.username, referrer_id)
        
        ref_link = f"https://t.me/{config.BOT_USERNAME}?start=ref{user.id}"
        
        welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ñ–æ—Ç–æ–±–∞—Ç–ª–µ!

üì∏ –ß—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é

‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

üî• –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
{ref_link}

üìä –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥–æ–ª–æ—Å–∞!
–ó–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ñ–æ—Ç–æ, —Ç—ã –ø–æ–ª—É—á–∏—à—å 3 –≥–æ–ª–æ—Å–∞.
"""
        
        await update.message.reply_text(welcome_text, reply_markup=self.get_main_menu())
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –º–µ–Ω—é"""
        text = update.message.text
        user_id = update.effective_user.id
        
        if text == "üî• –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ":
            await update.message.reply_text(
                "üì∏ –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –±–∞—Ç–ª–µ!\n\n"
                "‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ",
                reply_markup=self.get_main_menu()
            )
        
        elif text == "üé§ –ø–æ–ª—É—á–∏—Ç—å –≥–æ–ª–æ—Å–∞":
            ref_link = f"https://t.me/{config.BOT_USERNAME}?start=ref{user_id}"
            user_stats = db.get_user_stats(user_id)
            
            votes_text = f"""
üé§ –ì–æ–ª–æ—Å–∞ –¥–ª—è —Ñ–æ—Ç–æ–±–∞—Ç–ª–∞ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏:

1Ô∏è‚É£ –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ñ–æ—Ç–æ–±–∞—Ç–ª–µ —á–µ—Ä–µ–∑ —Ç–≤–æ—é —Å—Å—ã–ª–∫—É (—É–∫–∞–∑–∞–Ω–∞ –Ω–∏–∂–µ). –ï—Å–ª–∏ –∏—Ö –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∞, —Ç—ã –ø–æ–ª—É—á–∏—à—å 3 –≥–æ–ª–æ—Å–∞ üé§

2Ô∏è‚É£ –ü—Ä–∏–æ–±—Ä–µ—Ç–∏ –≥–æ–ª–æ—Å–∞ –∑–∞ –¥–µ–Ω—å–≥–∏ (1 –≥–æ–ª–æ—Å = 5‚ÇΩ)

üìä –£ —Ç–µ–±—è —Å–µ–π—á–∞—Å: {user_stats['extra_votes']} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤

üîó –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
{ref_link}

üí° –ß–µ–º –±–æ–ª—å—à–µ –≥–æ–ª–æ—Å–æ–≤ - —Ç–µ–º –≤—ã—à–µ —Ç–≤–æ–∏ —à–∞–Ω—Å—ã –Ω–∞ –ø–æ–±–µ–¥—É!
"""
            keyboard = [
                [InlineKeyboardButton("üí≥ –∫—É–ø–∏—Ç—å –≥–æ–ª–æ—Å–∞", url="https://t.me/lixxxer")]
            ]
            await update.message.reply_text(
                votes_text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        elif text == "üë§ –ø—Ä–æ—Ñ–∏–ª—å":
            user_stats = db.get_user_stats(user_id)
            ref_link = f"https://t.me/{config.BOT_USERNAME}?start=ref{user_id}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–∞—É–Ω–¥–µ
            current_round = db.get_current_round()
            can_use_votes = False
            if current_round:
                user_photo = db.get_user_photo_in_round(user_id, current_round['id'])
                if user_photo and user_photo['status'] == 'approved' and user_stats['extra_votes'] > 0:
                    can_use_votes = True
            
            profile_text = f"""
üë§ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:

üèÜ –í—ã–∏–≥—Ä–∞–Ω–æ —Ñ–æ—Ç–æ–±–∞—Ç–ª–æ–≤: {user_stats['wins']}
üì∏ –°—ã–≥—Ä–∞–Ω–æ —Ñ–æ—Ç–æ–±–∞—Ç–ª–æ–≤: {user_stats['played']}
üî• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user_stats['active_referrals']}

üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤: {user_stats['extra_votes']}

üîó –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
{ref_link}

üí° –†–µ—Ñ–µ—Ä–∞–ª —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ
"""
            
            keyboard = []
            if can_use_votes:
                keyboard.append([InlineKeyboardButton("‚ú® –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–∞", callback_data="use_votes")])
            
            await update.message.reply_text(
                profile_text, 
                reply_markup=InlineKeyboardMarkup(keyboard) if keyboard else None
            )
        
        elif text == "üí¨ –ø–æ–º–æ—â—å":
            help_text = """
üì∏ –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ñ–æ—Ç–æ–±–∞—Ç–ª–µ

üì¶ –ë–æ—Ç —Å–æ–æ–±—â–∏—Ç –æ –Ω–∞—á–∞–ª–µ —Ñ–æ—Ç–æ–±–∞—Ç–ª–∞, —Ç–∞–∫ —á—Ç–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–π –µ–≥–æ

‚ùì –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å
"""
            keyboard = [
                [
                    InlineKeyboardButton("–∫–∞–Ω–∞–ª", url=config.CHANNEL_LINK),
                    InlineKeyboardButton("–≤—ã–ø–ª–∞—Ç—ã", url="https://t.me/photozalupawins")
                ],
                [
                    InlineKeyboardButton("—Å–≤—è–∑–∞—Ç—å—Å—è", url="https://t.me/lixxxer"),
                    InlineKeyboardButton("–ø—Ä–∞–≤–∏–ª–∞", callback_data="show_rules")
                ]
            ]
            await update.message.reply_text(
                help_text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ"""
        user = update.effective_user
        photo = update.message.photo[-1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–∞—É–Ω–¥
        current_round = db.get_current_round()
        
        # –ï—Å–ª–∏ —Ä–∞—É–Ω–¥ –µ—Å—Ç—å –∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
        if current_round and current_round['number'] > 1:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
            photo_id = db.add_photo_to_queue(user.id, photo.file_id)
            await update.message.reply_text(
                "‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
                "üèÅ –¢–≤–æ–µ —Ñ–æ—Ç–æ –±—É–¥–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º –±–∞—Ç–ª–µ (–ø–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥)",
                reply_markup=self.get_main_menu()
            )
            await self.send_photo_to_admins(photo_id, photo.file_id, user, is_queue=True)
            return
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞—É–Ω–¥–∞ - —Å–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥—å —Ñ–æ—Ç–æ
        if not current_round:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ñ–æ—Ç–æ –≤ –æ—á–µ—Ä–µ–¥—å
            if db.user_has_photo_in_queue(user.id):
                await update.message.reply_text(
                    "‚ùå –¢—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ! –î–æ–∂–¥–∏—Å—å –Ω–∞—á–∞–ª–∞ –±–∞—Ç–ª–∞.",
                    reply_markup=self.get_main_menu()
                )
                return
            
            photo_id = db.add_photo_to_queue(user.id, photo.file_id)
            await update.message.reply_text(
                "‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!\n\n"
                "üèÅ –ë–æ—Ç —Å–æ–æ–±—â–∏—Ç –æ –Ω–∞—á–∞–ª–µ —Ñ–æ—Ç–æ–±–∞—Ç–ª–∞, —Ç–∞–∫ —á—Ç–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–π –µ–≥–æ",
                reply_markup=self.get_main_menu()
            )
            await self.send_photo_to_admins(photo_id, photo.file_id, user, is_queue=True)
            
            # –ù–∞—á–∏—Å–ª—è–µ–º –≥–æ–ª–æ—Å–∞ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
            user_data = db.get_user(user.id)
            if user_data and user_data['referrer_id']:
                user_photos_count = db.count_user_photos(user.id)
                if user_photos_count == 1:
                    db.add_referral_votes(user_data['referrer_id'], config.VOTES_PER_REFERRAL)
            return
        
        # –ü–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥ –∞–∫—Ç–∏–≤–µ–Ω
        if db.user_has_photo_in_round(user.id, current_round['id']):
            await update.message.reply_text(
                "‚ùå –¢—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ!",
                reply_markup=self.get_main_menu()
            )
            return
        
        photo_id = db.add_photo(
            user_id=user.id,
            file_id=photo.file_id,
            round_id=current_round['id']
        )
        
        logger.info(f"–§–æ—Ç–æ #{photo_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")
        
        user_data = db.get_user(user.id)
        if user_data and user_data['referrer_id']:
            user_photos_count = db.count_user_photos(user.id)
            if user_photos_count == 1:
                db.add_referral_votes(user_data['referrer_id'], config.VOTES_PER_REFERRAL)
        
        await update.message.reply_text(
            "‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!\n\n"
            "üèÅ –ë–æ—Ç —Å–æ–æ–±—â–∏—Ç –æ –Ω–∞—á–∞–ª–µ —Ñ–æ—Ç–æ–±–∞—Ç–ª–∞, —Ç–∞–∫ —á—Ç–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–π –µ–≥–æ",
            reply_markup=self.get_main_menu()
        )
        
        await self.send_photo_to_admins(photo_id, photo.file_id, user)
    
    async def send_photo_to_admins(self, photo_id: int, file_id: str, user, is_queue: bool = False):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω–∞–º –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{photo_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{photo_id}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        queue_text = " (–≤ –æ—á–µ—Ä–µ–¥–∏)" if is_queue else ""
        caption = f"""
üÜî ID —Ñ–æ—Ç–æ: {photo_id}{queue_text}
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or '–±–µ–∑ username'} (ID: {user.id})

–ú–æ–¥–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ:
"""
        
        admin_ids = db.get_all_admins()
        for admin_id in admin_ids:
            try:
                await self.app.bot.send_photo(
                    chat_id=admin_id,
                    photo=file_id,
                    caption=caption,
                    reply_markup=reply_markup
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    
    async def check_and_publish_battles(self, round_id: int):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –±–∞—Ç–ª–æ–≤"""
        try:
            unpaired_photos = db.get_unpaired_photos(round_id)
            logger.info(f"–†–∞—É–Ω–¥ {round_id}: –Ω–∞–π–¥–µ–Ω–æ {len(unpaired_photos)} —Ñ–æ—Ç–æ –±–µ–∑ –ø–∞—Ä—ã")
            
            pairs_count = len(unpaired_photos) // 2
            if pairs_count == 0:
                return
            
            logger.info(f"–°–æ–∑–¥–∞–µ–º {pairs_count} –Ω–æ–≤—ã—Ö –ø–∞—Ä")
            
            import random
            random.shuffle(unpaired_photos)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞—É–Ω–¥–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–µ—Ä–≤–æ–≥–æ –±–∞—Ç–ª–∞
            if round_id not in self.round_end_times:
                end_time = datetime.now(MSK) + timedelta(hours=2)
                self.round_end_times[round_id] = end_time
                logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞—É–Ω–¥–∞ {round_id}: {end_time.strftime('%H:%M')} –ú–°–ö")
            
            for i in range(pairs_count):
                photo1 = unpaired_photos[i * 2]
                photo2 = unpaired_photos[i * 2 + 1]
                
                battle_id = db.create_battle(round_id, photo1['id'], photo2['id'])
                logger.info(f"–°–æ–∑–¥–∞–Ω –±–∞—Ç–ª #{battle_id}")
                
                success = await self.publish_battle(battle_id, photo1, photo2, round_id)
                if success:
                    logger.info(f"‚úÖ –ë–∞—Ç–ª #{battle_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∫–Ω–æ–ø–∫–æ–π "–Ω–∞–π—Ç–∏ —Å–µ–±—è"
                    current_round = db.get_round_by_id(round_id)
                    if current_round and current_round['number'] == 1:
                        for photo in [photo1, photo2]:
                            try:
                                battle_link = f"{config.CHANNEL_LINK}/{battle_id}"
                                keyboard = [[InlineKeyboardButton("üîç –Ω–∞–π—Ç–∏ —Å–µ–±—è", url=battle_link)]]
                                
                                await self.app.bot.send_message(
                                    chat_id=photo['user_id'],
                                    text=f"‚ñ∂Ô∏è 1 —Ä–∞—É–Ω–¥ —Ñ–æ—Ç–æ–±–∞—Ç–ª–∞ –Ω–∞—á–∞–ª—Å—è\n\n"
                                         f"‚ùóÔ∏è –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 –≥–æ–ª–æ—Å–æ–≤ –∏ –æ–±–æ–≥–Ω–∞—Ç—å —Å–æ–ø–µ—Ä–Ω–∏–∫–∞, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥\n\n"
                                         f"üìù –ß—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å —Å–≤–æ–∏ —à–∞–Ω—Å—ã –Ω–∞ –ø–æ–±–µ–¥—É, –ø–æ–ø—Ä–æ—Å–∏ –¥—Ä—É–∑–µ–π –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Ç–µ–±—è",
                                    reply_markup=InlineKeyboardMarkup(keyboard)
                                )
                            except:
                                pass
                
                await asyncio.sleep(2)
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ check_and_publish_battles: {e}", exc_info=True)
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        user_id = query.from_user.id
        data = query.data
        
        # –ü—Ä–∞–≤–∏–ª–∞
        if data == 'show_rules':
            await query.answer()
            rules_text = """
<b>–ü–†–ê–í–ò–õ–ê –§–û–¢–û–ë–ê–¢–õ–ê</b>

‚Ä¢ –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á—É–∂–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏!

‚Ä¢ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞;

‚Ä¢ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª 18+;

‚Ä¢ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ–ª–µ–µ 1 –∞–∫–∫–∞—É–Ω—Ç–∞ –æ–¥–Ω–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º;

‚Ä¢ –ø–æ–ø—ã—Ç–∫–∞ –æ–±–º–∞–Ω–∞/–æ–±–º–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏;

‚Ä¢ —Ç–æ, —á—Ç–æ –º–Ω–µ –º–æ–∂–µ—Ç –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—å—Å—è.
"""
            await query.message.reply_text(rules_text, parse_mode='HTML')
            return
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤
        if data == 'use_votes':
            await query.answer()
            
            current_round = db.get_current_round()
            if not current_round:
                await query.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞", show_alert=True)
                return
            
            user_photo = db.get_user_photo_in_round(user_id, current_round['id'])
            if not user_photo or user_photo['status'] != 'approved':
                await query.answer("–í–∞—à–µ —Ñ–æ—Ç–æ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –±–∞—Ç–ª–µ", show_alert=True)
                return
            
            user_stats = db.get_user_stats(user_id)
            if user_stats['extra_votes'] <= 0:
                await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤", show_alert=True)
                return
            
            votes_to_use = user_stats['extra_votes']
            db.use_extra_votes(user_id, user_photo['id'], votes_to_use)
            
            await query.answer(
                f"‚ú® –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {votes_to_use} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤!",
                show_alert=True
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–∞–Ω–∞–ª–µ
            battle = db.get_battle_by_photo(user_photo['id'])
            if battle and battle['message_id']:
                try:
                    votes = db.get_battle_votes(battle['id'])
                    await self.update_battle_buttons(battle['id'], battle['message_id'], votes, battle['photo1_id'], battle['photo2_id'])
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫: {e}")
            
            return
        
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
        if data.startswith('admin_'):
            await query.answer()
            
            if not db.is_admin(user_id):
                await query.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º!", show_alert=True)
                return
            
            if data == 'admin_start_round':
                await self.start_round(update, context)
            elif data == 'admin_next_round':
                await self.next_round(update, context)
            elif data == 'admin_end_battle':
                await self.end_battle(update, context)
            elif data == 'admin_set_prize':
                await query.message.reply_text(
                    "üí∞ –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–∑, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                    "/set_prize –í–∞—à –Ω–æ–≤—ã–π –ø—Ä–∏–∑\n\n"
                    "–ü—Ä–∏–º–µ—Ä: /set_prize 1000‚ÇΩ –∏–ª–∏ 500‚≠ê"
                )
            elif data == 'admin_stats':
                await self.stats(update, context)
            elif data == 'admin_list':
                admins = db.get_all_admins()
                admin_list = "\n".join([f"‚Ä¢ {admin_id}" for admin_id in admins])
                await query.message.reply_text(f"üëë –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n\n{admin_list}")
            return
        
        # –ú–æ–¥–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ
        if data.startswith(('approve_', 'reject_')):
            await query.answer()
            
            if not db.is_admin(user_id):
                await query.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º!", show_alert=True)
                return
            
            action, photo_id = data.split('_')
            photo_id = int(photo_id)
            
            if action == 'approve':
                photo = db.get_photo_by_id(photo_id)
                if not photo:
                    await query.answer("–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
                    return
                
                db.update_photo_status(photo_id, 'approved')
                await query.edit_message_caption(
                    caption=query.message.caption + "\n\n‚úÖ –û–î–û–ë–†–ï–ù–û"
                )
                
                try:
                    await self.app.bot.send_message(
                        chat_id=photo['user_id'],
                        text="‚úÖ –í–∞—à–µ —Ñ–æ—Ç–æ –æ–¥–æ–±—Ä–µ–Ω–æ –∏ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –±–∞—Ç–ª–µ!\n\n"
                             "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –∫–∞–Ω–∞–ª–æ–º - —Å–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ!",
                        reply_markup=self.get_main_menu()
                    )
                except:
                    pass
                
                logger.info(f"–§–æ—Ç–æ #{photo_id} –æ–¥–æ–±—Ä–µ–Ω–æ")
                
                if photo['round_id']:
                    await self.check_and_publish_battles(photo['round_id'])
                
            else:
                db.update_photo_status(photo_id, 'rejected')
                await query.edit_message_caption(
                    caption=query.message.caption + "\n\n‚ùå –û–¢–ö–õ–û–ù–ï–ù–û"
                )
            return
        
        # –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        if data.startswith('vote_'):
            is_subscribed = await self.check_subscription(user_id)
            if not is_subscribed:
                await query.answer(
                    "‚ùå –ß—Ç–æ–±—ã –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å, –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!",
                    show_alert=True
                )
                return
            
            parts = data.split('_')
            battle_id = int(parts[1])
            photo_id = int(parts[2])
            
            if db.user_voted_in_battle(user_id, battle_id):
                await query.answer(
                    "‚ùå –í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –≤ —ç—Ç–æ–º –±–∞—Ç–ª–µ!",
                    show_alert=True
                )
                return
            
            success = db.add_vote(user_id, battle_id, photo_id)
            
            if success:
                votes = db.get_battle_votes(battle_id)
                
                battle = db.get_battle_by_id(battle_id)
                await self.update_battle_buttons(battle_id, query.message.message_id, votes, battle['photo1_id'], battle['photo2_id'])
                
                await query.answer(
                    "üî• –ì–æ–ª–æ—Å —É—á—Ç—ë–Ω!\n\n"
                    "‚ùóÔ∏è –ü—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ –æ—Ç –∫–∞–Ω–∞–ª–∞ –≥–æ–ª–æ—Å –Ω–µ –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω\n\n"
                    "‚è± –ì–æ–ª–æ—Å –∑–∞—á–∏—Å–ª–∏—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç—ã",
                    show_alert=True
                )
            else:
                await query.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    show_alert=True
                )
    
    async def update_battle_buttons(self, battle_id: int, message_id: int, votes: dict, photo1_id: int, photo2_id: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤"""
        try:
            keyboard = [
                [
                    InlineKeyboardButton(f"–ª–µ–≤–æ {votes['photo1']}", callback_data=f"vote_{battle_id}_{photo1_id}"),
                    InlineKeyboardButton(f"–ø—Ä–∞–≤–æ {votes['photo2']}", callback_data=f"vote_{battle_id}_{photo2_id}")
                ]
            ]
            
            await self.app.bot.edit_message_reply_markup(
                chat_id=config.CHANNEL_ID,
                message_id=message_id,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫: {e}")
    
    async def publish_battle(self, battle_id: int, photo1: dict, photo2: dict, round_id: int) -> bool:
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –±–∞—Ç–ª–∞ –≤ –∫–∞–Ω–∞–ª"""
        try:
            current_round = db.get_round_by_id(round_id)
            round_number = current_round['number'] if current_round else 1
            
            min_votes_required = config.MIN_VOTES * round_number
            
            end_time = self.round_end_times.get(round_id)
            if end_time:
                time_str = end_time.strftime("%H:%M")
            else:
                time_str = "—Å–∫–æ—Ä–æ"
            
            # photo1 –°–õ–ï–í–ê, photo2 –°–ü–†–ê–í–ê
            media = [
                InputMediaPhoto(media=photo1['file_id']),
                InputMediaPhoto(media=photo2['file_id'])
            ]
            
            messages = await self.app.bot.send_media_group(
                chat_id=config.CHANNEL_ID,
                media=media
            )
            
            for msg in messages:
                db.add_battle_message(battle_id, msg.message_id)
            
            # –ö–Ω–æ–ø–∫–∞ "–ª–µ–≤–æ" = photo1, "–ø—Ä–∞–≤–æ" = photo2
            keyboard = [
                [
                    InlineKeyboardButton("–ª–µ–≤–æ", callback_data=f"vote_{battle_id}_{photo1['id']}"),
                    InlineKeyboardButton("–ø—Ä–∞–≤–æ", callback_data=f"vote_{battle_id}_{photo2['id']}")
                ]
            ]
            
            caption = f"""
üî• –ú–û–ù–°–¢–†–´ –¢–¢

‚öúÔ∏è {round_number} —Ä–∞—É–Ω–¥
üí∞ –ü–†–ò–ó: {CURRENT_PRIZE}

üëâ<a href="https://t.me/{config.BOT_USERNAME}">—Å—Å—ã–ª–∫–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è</a>üëà

üó£ –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –º–∏–Ω–∏–º—É–º {min_votes_required} –≥–æ–ª–æ—Å–æ–≤

‚ú®<a href="https://t.me/{config.BOT_USERNAME}">–Ω–∞–∂–º–∏, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ</a>

üßë‚Äçüíº –∏—Ç–æ–≥–∏ —Å–µ–≥–æ–¥–Ω—è –≤ {time_str} –ø–æ –ú–°–ö
"""
            
            msg = await self.app.bot.send_message(
                chat_id=config.CHANNEL_ID,
                text=caption,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML',
                disable_web_page_preview=True
            )
            
            db.update_battle_message_id(battle_id, msg.message_id)
            db.add_battle_message(battle_id, msg.message_id)
            
            logger.info(f"‚úÖ –ë–∞—Ç–ª #{battle_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–∞—Ç–ª–∞ #{battle_id}: {e}", exc_info=True)
            return False
    
    async def admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
        user_id = update.effective_user.id
        
        if not db.is_admin(user_id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
        
        current_round = db.get_current_round()
        pending = db.count_photos_by_status('pending', current_round['id'] if current_round else None)
        approved = db.count_photos_by_status('approved', current_round['id'] if current_round else None)
        battles = db.count_battles_in_round(current_round['id']) if current_round else 0
        
        admin_text = f"""
üëë –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨

üìä –¢–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥: {current_round['number'] if current_round else '–ù–µ —Å–æ–∑–¥–∞–Ω'}
üì∏ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {pending}
‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {approved}
‚öîÔ∏è –ë–∞—Ç–ª–æ–≤: {battles}
üí∞ –¢–µ–∫—É—â–∏–π –ø—Ä–∏–∑: {CURRENT_PRIZE}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
"""
        
        await update.message.reply_text(admin_text, reply_markup=self.get_admin_menu())
    
    async def start_round(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥"""
        user_id = update.effective_user.id if update.effective_user else None
        
        if user_id and not db.is_admin(user_id):
            return
        
        current_round = db.get_current_round()
        if current_round:
            msg = "‚ùå –£–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–∞—É–Ω–¥!"
            if update.message:
                await update.message.reply_text(msg)
            elif update.callback_query:
                await update.callback_query.message.reply_text(msg)
            return
        
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ñ–æ—Ç–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –≤ –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥
        round_id = db.create_round(round_number=1)
        db.move_queue_to_round(round_id)
        
        logger.info(f"–°–æ–∑–¥–∞–Ω —Ä–∞—É–Ω–¥ #{round_id}")
        
        task = asyncio.create_task(self.round_timer(round_id, hours=2))
        self.round_tasks[round_id] = task
        
        # –ü—É–±–ª–∏–∫—É–µ–º –±–∞—Ç–ª—ã
        await self.check_and_publish_battles(round_id)
        
        msg = f"‚úÖ –†–∞—É–Ω–¥ 1 –Ω–∞—á–∞—Ç!"
        if update.message:
            await update.message.reply_text(msg)
        elif update.callback_query:
            await update.callback_query.message.reply_text(msg)
    
    async def round_timer(self, round_id: int, hours: int = 2):
        """–¢–∞–π–º–µ—Ä —Ä–∞—É–Ω–¥–∞"""
        try:
            await asyncio.sleep(hours * 3600)
            current_round = db.get_round_by_id(round_id)
            if current_round and current_round['status'] == 'active':
                logger.info(f"–¢–∞–π–º–µ—Ä —Ä–∞—É–Ω–¥–∞ {round_id} –∏—Å—Ç–µ–∫")
        except asyncio.CancelledError:
            logger.info(f"–¢–∞–π–º–µ—Ä —Ä–∞—É–Ω–¥–∞ {round_id} –æ—Ç–º–µ–Ω–µ–Ω")
    
    def get_battle_winners(self, round_id: int):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –±–∞—Ç–ª–æ–≤ –≤ —Ä–∞—É–Ω–¥–µ"""
        battles = db.get_round_battles(round_id)
        winners = []
        losers = []
        
        for battle in battles:
            votes = db.get_battle_votes(battle['id'])
            photo1 = db.get_photo_by_id(battle['photo1_id'])
            photo2 = db.get_photo_by_id(battle['photo2_id'])
            
            # –ü–æ–ª—É—á–∞–µ–º username –¥–ª—è –æ–±–æ–∏—Ö —Ñ–æ—Ç–æ
            user1 = db.get_user(photo1['user_id'])
            user2 = db.get_user(photo2['user_id'])
            
            photo1_with_username = {**photo1, 'username': user1['username'] if user1 else None}
            photo2_with_username = {**photo2, 'username': user2['username'] if user2 else None}
            
            if votes['photo1'] > votes['photo2']:
                winners.append({**photo1_with_username, 'votes': votes['photo1']})
                losers.append({**photo2_with_username, 'votes': votes['photo2']})
            elif votes['photo2'] > votes['photo1']:
                winners.append({**photo2_with_username, 'votes': votes['photo2']})
                losers.append({**photo1_with_username, 'votes': votes['photo1']})
            else:
                import random
                if random.choice([True, False]):
                    winners.append({**photo1_with_username, 'votes': votes['photo1']})
                    losers.append({**photo2_with_username, 'votes': votes['photo2']})
                else:
                    winners.append({**photo2_with_username, 'votes': votes['photo2']})
                    losers.append({**photo1_with_username, 'votes': votes['photo1']})
        
        return winners, losers
    
    async def delete_round_messages(self, round_id: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞—É–Ω–¥–∞"""
        try:
            messages = db.get_round_messages(round_id)
            for msg_id in messages:
                try:
                    await self.app.bot.delete_message(
                        chat_id=config.CHANNEL_ID,
                        message_id=msg_id
                    )
                    await asyncio.sleep(0.1)
                except:
                    pass
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    
    async def next_round(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥"""
        user_id = update.effective_user.id if update.effective_user else None
        
        if user_id and not db.is_admin(user_id):
            return
        
        current_round = db.get_current_round()
        if not current_round:
            msg = "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞!"
            if update.message:
                await update.message.reply_text(msg)
            elif update.callback_query:
                await update.callback_query.message.reply_text(msg)
            return
        
        try:
            winners, losers = self.get_battle_winners(current_round['id'])
            
            for winner in winners:
                try:
                    await self.app.bot.send_message(
                        chat_id=winner['user_id'],
                        text=f"‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–≤–æ–µ —Ñ–æ—Ç–æ –ø—Ä–æ—à–ª–æ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥!\n\n"
                             f"üìä –¢—ã –Ω–∞–±—Ä–∞–ª {winner['votes']} –≥–æ–ª–æ—Å–æ–≤ –∏ –ø–æ–±–µ–¥–∏–ª –≤ —Å–≤–æ–µ–π –ø–∞—Ä–µ!",
                        reply_markup=self.get_main_menu()
                    )
                except:
                    pass
            
            for loser in losers:
                try:
                    await self.app.bot.send_message(
                        chat_id=loser['user_id'],
                        text=f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–≤–æ–µ —Ñ–æ—Ç–æ –Ω–µ –ø—Ä–æ—à–ª–æ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥\n\n"
                             f"üìä –¢—ã –Ω–∞–±—Ä–∞–ª {loser['votes']} –≥–æ–ª–æ—Å–æ–≤, –Ω–æ —Å–æ–ø–µ—Ä–Ω–∏–∫ –Ω–∞–±—Ä–∞–ª –±–æ–ª—å—à–µ\n\n"
                             f"üí™ –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è! –£—á–∞—Å—Ç–≤—É–π –≤ —Å–ª–µ–¥—É—é—â–µ–º –±–∞—Ç–ª–µ!",
                        reply_markup=self.get_main_menu()
                    )
                except:
                    pass
            
            await self.delete_round_messages(current_round['id'])
            
            if len(winners) == 1:
                winner = winners[0]
                db.end_round(current_round['id'])
                
                try:
                    await self.app.bot.send_message(
                        chat_id=winner['user_id'],
                        text=f"üèÜ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –¢–´ –ü–û–ë–ï–î–ò–¢–ï–õ–¨ –§–û–¢–û–ë–ê–¢–õ–ê!\n\n"
                             f"üí∞ –¢–≤–æ–π –ø—Ä–∏–∑: {CURRENT_PRIZE}\n\n"
                             f"üéâ –°–≤—è–∂–∏—Å—å —Å –∞–¥–º–∏–Ω–æ–º @lixxxer –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞!",
                        reply_markup=self.get_main_menu()
                    )
                except:
                    pass
                
                username = f"@{winner['username']}" if winner.get('username') else "–ê–Ω–æ–Ω–∏–º"
                msg = f"‚úÖ –ë–∞—Ç–ª –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {username} ({winner['votes']} –≥–æ–ª–æ—Å–æ–≤)"
            
            elif len(winners) < 2:
                db.end_round(current_round['id'])
                msg = "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞. –ë–∞—Ç–ª –∑–∞–≤–µ—Ä—à–µ–Ω."
            
            else:
                next_round_number = current_round['number'] + 1
                new_round_id = db.create_round(round_number=next_round_number)
                db.update_round_status(current_round['id'], 'completed')
                
                task = asyncio.create_task(self.round_timer(new_round_id, hours=2))
                self.round_tasks[new_round_id] = task
                
                await self.publish_battles_from_winners(new_round_id, winners)
                
                msg = f"‚úÖ –†–∞—É–Ω–¥ {next_round_number} –Ω–∞—á–∞—Ç! –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(winners)}"
            
            if update.message:
                await update.message.reply_text(msg)
            elif update.callback_query:
                await update.callback_query.message.reply_text(msg)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ next_round: {e}", exc_info=True)
    
    async def publish_battles_from_winners(self, round_id: int, winners: list):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –±–∞—Ç–ª–æ–≤ –∏–∑ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π"""
        import random
        random.shuffle(winners)
        
        for i in range(0, len(winners) - 1, 2):
            photo1 = winners[i]
            photo2 = winners[i + 1]
            
            battle_id = db.create_battle(round_id, photo1['id'], photo2['id'])
            await self.publish_battle(battle_id, photo1, photo2, round_id)
            await asyncio.sleep(2)
    
    async def end_battle(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –±–∞—Ç–ª"""
        user_id = update.effective_user.id if update.effective_user else None
        
        if user_id and not db.is_admin(user_id):
            return
        
        current_round = db.get_current_round()
        if not current_round:
            msg = "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞!"
            if update.message:
                await update.message.reply_text(msg)
            elif update.callback_query:
                await update.callback_query.message.reply_text(msg)
            return
        
        try:
            if current_round['id'] in self.round_tasks:
                self.round_tasks[current_round['id']].cancel()
            
            round_photos = db.get_round_photos_with_votes(current_round['id'])
            
            if not round_photos:
                msg = "‚ùå –ù–µ—Ç —Ñ–æ—Ç–æ –≤ —Ç–µ–∫—É—â–µ–º —Ä–∞—É–Ω–¥–µ"
                if update.message:
                    await update.message.reply_text(msg)
                elif update.callback_query:
                    await update.callback_query.message.reply_text(msg)
                return
            
            round_photos.sort(key=lambda x: x['votes'], reverse=True)
            winner = round_photos[0]
            
            db.end_round(current_round['id'])
            await self.delete_round_messages(current_round['id'])
            
            try:
                await self.app.bot.send_message(
                    chat_id=winner['user_id'],
                    text=f"üèÜ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –¢–´ –ü–û–ë–ï–î–ò–¢–ï–õ–¨ –§–û–¢–û–ë–ê–¢–õ–ê!\n\n"
                         f"üí∞ –¢–≤–æ–π –ø—Ä–∏–∑: {CURRENT_PRIZE}\n\n"
                         f"üìä –¢—ã –Ω–∞–±—Ä–∞–ª {winner['votes']} –≥–æ–ª–æ—Å–æ–≤!\n\n"
                         f"üéâ –°–≤—è–∂–∏—Å—å —Å –∞–¥–º–∏–Ω–æ–º @lixxxer –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞!",
                    reply_markup=self.get_main_menu()
                )
            except:
                pass
            
            username = f"@{winner['username']}" if winner.get('username') else "–ê–Ω–æ–Ω–∏–º"
            result_text = f"üèÜ –§–æ—Ç–æ–±–∞—Ç–ª –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
            result_text += f"üëë –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {username}\n"
            result_text += f"üìä –ì–æ–ª–æ—Å–æ–≤: {winner['votes']}\n\n"
            
            if len(round_photos) > 1:
                result_text += "–¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n"
                for idx, photo in enumerate(round_photos[:10], 1):
                    emoji = "ü•á" if idx == 1 else "ü•à" if idx == 2 else "ü•â" if idx == 3 else f"{idx}."
                    username = f"@{photo['username']}" if photo.get('username') else "–ê–Ω–æ–Ω–∏–º"
                    result_text += f"{emoji} {username} - {photo['votes']} –≥–æ–ª–æ—Å–æ–≤\n"
            
            if update.message:
                await update.message.reply_text(result_text)
            elif update.callback_query:
                await update.callback_query.message.reply_text(result_text)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ end_battle: {e}", exc_info=True)
    
    async def stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        stats = db.get_bot_stats()
        
        stats_text = f"""
üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
üì∏ –§–æ—Ç–æ: {stats['total_photos']}
‚öîÔ∏è –ë–∞—Ç–ª–æ–≤: {stats['total_battles']}
üó≥ –ì–æ–ª–æ—Å–æ–≤: {stats['total_votes']}
"""
        
        if update.message:
            await update.message.reply_text(stats_text)
        elif update.callback_query:
            await update.callback_query.message.reply_text(stats_text)
    
    async def set_prize(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–∑"""
        global CURRENT_PRIZE
        
        if not db.is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
        
        if not context.args:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_prize –í–∞—à –ø—Ä–∏–∑\n–ü—Ä–∏–º–µ—Ä: /set_prize 1000‚ÇΩ")
            return
        
        CURRENT_PRIZE = " ".join(context.args)
        await update.message.reply_text(f"‚úÖ –ü—Ä–∏–∑ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {CURRENT_PRIZE}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        self.app.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    try:
        bot = PhotoBattleBot()
        bot.run()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
