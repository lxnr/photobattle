import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ChatMember
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from telegram.error import TelegramError
from database import Database
import config
import asyncio

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

db = Database()


class PhotoBattleBot:
    def __init__(self):
        self.app = Application.builder().token(config.BOT_TOKEN).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        # –ö–æ–º–∞–Ω–¥—ã
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("admin", self.admin_panel))
        self.app.add_handler(CommandHandler("start_round", self.start_round))
        self.app.add_handler(CommandHandler("next_round", self.next_round))
        self.app.add_handler(CommandHandler("end_battle", self.end_battle))
        self.app.add_handler(CommandHandler("stats", self.stats))
        self.app.add_handler(CommandHandler("add_admin", self.add_admin))
        self.app.add_handler(CommandHandler("remove_admin", self.remove_admin))
        self.app.add_handler(CommandHandler("list_admins", self.list_admins))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
        self.app.add_handler(MessageHandler(filters.PHOTO, self.handle_photo))
        
        # Callback –∫–Ω–æ–ø–∫–∏
        self.app.add_handler(CallbackQueryHandler(self.handle_callback))
    
    async def check_subscription(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
        try:
            member = await self.app.bot.get_chat_member(config.CHANNEL_ID, user_id)
            return member.status in [ChatMember.MEMBER, ChatMember.ADMINISTRATOR, ChatMember.OWNER]
        except TelegramError:
            return False
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π"""
        user = update.effective_user
        args = context.args
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        referrer_id = None
        if args and args[0].startswith('ref'):
            try:
                referrer_id = int(args[0].replace('ref', ''))
                if referrer_id == user.id:
                    referrer_id = None  # –ù–µ–ª—å–∑—è –±—ã—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º —Å–∞–º–æ–º—É —Å–µ–±–µ
            except ValueError:
                pass
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        is_new = db.add_user(user.id, user.username, referrer_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        ref_link = f"https://t.me/{config.BOT_USERNAME}?start=ref{user.id}"
        
        welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ñ–æ—Ç–æ–±–∞—Ç–ª–µ!

üì∏ –ß—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≥–¥–µ –≤–∏–¥–Ω–æ –ª–∏—Ü–æ, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –∏–ª–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π.

‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

üî• –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
{ref_link}

üìä –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥–æ–ª–æ—Å–∞!
–ó–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ñ–æ—Ç–æ, —Ç—ã –ø–æ–ª—É—á–∏—à—å 3 –≥–æ–ª–æ—Å–∞.
"""
        
        keyboard = [
            [InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
            [InlineKeyboardButton("üìñ –ü—Ä–∞–≤–∏–ª–∞", callback_data="rules")],
            [InlineKeyboardButton("üì¢ –ö–∞–Ω–∞–ª —Å –±–∞—Ç–ª–∞–º–∏", url=config.CHANNEL_LINK)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ"""
        user = update.effective_user
        photo = update.message.photo[-1]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ä–∞—É–Ω–¥
        current_round = db.get_current_round()
        if not current_round or current_round['status'] != 'active':
            await update.message.reply_text(
                "‚ùå –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞. –î–æ–∂–¥–∏—Å—å –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –±–∞—Ç–ª–∞!"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –ª–∏ —É–∂–µ —Ñ–æ—Ç–æ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ
        if db.user_has_photo_in_round(user.id, current_round['id']):
            await update.message.reply_text(
                "‚ùå –¢—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ!"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
        photo_id = db.add_photo(
            user_id=user.id,
            file_id=photo.file_id,
            round_id=current_round['id']
        )
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª –∏ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ - –Ω–∞—á–∏—Å–ª—è–µ–º –≥–æ–ª–æ—Å–∞ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
        user_data = db.get_user(user.id)
        if user_data and user_data['referrer_id']:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–≤–æ–µ –ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_photos_count = db.count_user_photos(user.id)
            if user_photos_count == 1:  # –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
                db.add_referral_votes(user_data['referrer_id'], config.VOTES_PER_REFERRAL)
        
        await update.message.reply_text(
            "‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!\n\n"
            "üèÅ –ë–æ—Ç —Å–æ–æ–±—â–∏—Ç –æ –Ω–∞—á–∞–ª–µ —Ñ–æ—Ç–æ–±–∞—Ç–ª–∞, —Ç–∞–∫ —á—Ç–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–π –µ–≥–æ"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω–∞–º –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
        await self.send_photo_to_admins(photo_id, photo.file_id, user)
    
    async def send_photo_to_admins(self, photo_id: int, file_id: str, user):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω–∞–º –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{photo_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{photo_id}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        caption = f"""
üÜî ID —Ñ–æ—Ç–æ: {photo_id}
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or '–±–µ–∑ username'} (ID: {user.id})

–ú–æ–¥–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ:
"""
        
        admin_ids = db.get_all_admins()
        for admin_id in admin_ids:
            try:
                await self.app.bot.send_photo(
                    chat_id=admin_id,
                    photo=file_id,
                    caption=caption,
                    reply_markup=reply_markup
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        data = query.data
        
        # –ú–æ–¥–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        if data.startswith(('approve_', 'reject_')):
            if not db.is_admin(user_id):
                await query.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º!", show_alert=True)
                return
            
            action, photo_id = data.split('_')
            photo_id = int(photo_id)
            
            if action == 'approve':
                db.update_photo_status(photo_id, 'approved')
                await query.edit_message_caption(
                    caption=query.message.caption + "\n\n‚úÖ –û–î–û–ë–†–ï–ù–û"
                )
                
            else:  # reject
                db.update_photo_status(photo_id, 'rejected')
                await query.edit_message_caption(
                    caption=query.message.caption + "\n\n‚ùå –û–¢–ö–õ–û–ù–ï–ù–û"
                )
        
        # –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –≤ –±–∞—Ç–ª–µ
        elif data.startswith('vote_'):
            parts = data.split('_')
            battle_id = int(parts[1])
            photo_id = int(parts[2])
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
            is_subscribed = await self.check_subscription(user_id)
            if not is_subscribed:
                keyboard = [[InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=config.CHANNEL_LINK)]]
                await query.answer(
                    "‚ùå –ß—Ç–æ–±—ã –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å, –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!",
                    show_alert=True
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞: –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ —É–∂–µ –≤ —ç—Ç–æ–º –±–∞—Ç–ª–µ
            if db.user_voted_in_battle(user_id, battle_id):
                await query.answer(
                    "‚ùå –í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –≤ —ç—Ç–æ–º –±–∞—Ç–ª–µ",
                    show_alert=True
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å
            db.add_vote(user_id, battle_id, photo_id)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await query.answer(
                "üî• –ì–æ–ª–æ—Å —É—á—Ç—ë–Ω\n\n"
                "‚ùóÔ∏è –ü—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ –æ—Ç –∫–∞–Ω–∞–ª–∞ –≥–æ–ª–æ—Å –Ω–µ –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω\n\n"
                "‚è± –ì–æ–ª–æ—Å –∑–∞—á–∏—Å–ª–∏—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç—ã",
                show_alert=True
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É
            asyncio.create_task(self.update_vote_count_delayed(battle_id, query.message))
        
        # –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        elif data == 'profile':
            user_stats = db.get_user_stats(user_id)
            ref_link = f"https://t.me/{config.BOT_USERNAME}?start=ref{user_id}"
            
            profile_text = f"""
üë§ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:

üèÜ –í—ã–∏–≥—Ä–∞–Ω–æ —Ñ–æ—Ç–æ–±–∞—Ç–ª–æ–≤: {user_stats['wins']}
üì∏ –°—ã–≥—Ä–∞–Ω–æ —Ñ–æ—Ç–æ–±–∞—Ç–ª–æ–≤: {user_stats['played']}
üî• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user_stats['active_referrals']}

üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤: {user_stats['extra_votes']}

üîó –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
{ref_link}

üí° –†–µ—Ñ–µ—Ä–∞–ª —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ
"""
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]]
            await query.edit_message_text(profile_text, reply_markup=InlineKeyboardMarkup(keyboard))
        
        # –ü—Ä–∞–≤–∏–ª–∞
        elif data == 'rules':
            rules_text = """
üìñ –ü–†–ê–í–ò–õ–ê –§–û–¢–û–ë–ê–¢–õ–ê:

1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≥–¥–µ –≤–∏–¥–Ω–æ –ª–∏—Ü–æ
2Ô∏è‚É£ –§–æ—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–º –∏–ª–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–º
3Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
4Ô∏è‚É£ –ê–¥–º–∏–Ω—ã –ø—Ä–æ–≤–µ—Ä—è—Ç –∏ –æ–¥–æ–±—Ä—è—Ç —Ç–≤–æ–µ —Ñ–æ—Ç–æ
5Ô∏è‚É£ –ö–æ–≥–¥–∞ –Ω–∞–±–µ—Ä–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 8 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –Ω–∞—á–Ω–µ—Ç—Å—è –±–∞—Ç–ª
6Ô∏è‚É£ –ë–∞—Ç–ª –ø—Ä–æ—Ö–æ–¥–∏—Ç –º–µ–∂–¥—É –¥–≤—É–º—è —Ñ–æ—Ç–æ - –ø–æ–±–µ–∂–¥–∞–µ—Ç —Ç–∞, —á—Ç–æ –Ω–∞–±–µ—Ä–µ—Ç –±–æ–ª—å—à–µ –≥–æ–ª–æ—Å–æ–≤
7Ô∏è‚É£ –ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥, –Ω—É–∂–Ω–æ –Ω–∞–±—Ä–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 –≥–æ–ª–æ—Å–æ–≤
8Ô∏è‚É£ –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ - –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ñ–æ—Ç–æ, –ø–æ–ª—É—á–∏—à—å 3 –≥–æ–ª–æ—Å–∞!

üîî –î–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –∫–∞–Ω–∞–ª

–£–¥–∞—á–∏! üî•
"""
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]]
            await query.edit_message_text(rules_text, reply_markup=InlineKeyboardMarkup(keyboard))
        
        elif data == 'back_to_start':
            await self.start_command(update, context)
    
    async def update_vote_count_delayed(self, battle_id: int, message):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –≥–æ–ª–æ—Å–æ–≤ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É"""
        await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É
        
        try:
            votes = db.get_battle_votes(battle_id)
            await self.update_battle_message(message, battle_id, votes)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –≥–æ–ª–æ—Å–æ–≤: {e}")
    
    async def update_battle_message(self, message, battle_id: int, votes: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–∞—Ç–ª–æ–º (—Å—á–µ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤)"""
        caption = f"""
üî• –§–û–¢–û–ë–ê–¢–õ ‚Ññ{battle_id}

‚óÄÔ∏è –õ–µ–≤–æ: {votes['photo1']} –≥–æ–ª–æ—Å–æ–≤
–ü—Ä–∞–≤–æ ‚ñ∂Ô∏è: {votes['photo2']} –≥–æ–ª–æ—Å–æ–≤

–ì–æ–ª–æ—Å—É–π –∑–∞ –ª—É—á—à–µ–µ —Ñ–æ—Ç–æ!
"""
        
        try:
            await message.edit_caption(caption=caption, reply_markup=message.reply_markup)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞: {e}")
    
    async def admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
        user_id = update.effective_user.id
        
        if not db.is_admin(user_id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
        
        current_round = db.get_current_round()
        pending_count = db.count_photos_by_status('pending', current_round['id'] if current_round else None)
        approved_count = db.count_photos_by_status('approved', current_round['id'] if current_round else None)
        
        admin_text = f"""
üëë –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨

üìä –¢–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥: {current_round['number'] if current_round else '–ù–µ —Å–æ–∑–¥–∞–Ω'}
üì∏ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {pending_count}
‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ —Ñ–æ—Ç–æ: {approved_count}

–ö–æ–º–∞–Ω–¥—ã:
/start_round - –ù–∞—á–∞—Ç—å 1 —Ä–∞—É–Ω–¥ –±–∞—Ç–ª–∞ (–Ω–∞–±–æ—Ä —Ñ–æ—Ç–æ)
/next_round - –ù–∞—á–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥ —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏
/end_battle - –ó–∞–≤–µ—Ä—à–∏—Ç—å –±–∞—Ç–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
/add_admin [ID] - –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞
/remove_admin [ID] - –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞
/list_admins - –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
"""
        
        await update.message.reply_text(admin_text)
    
    async def start_round(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π 1 —Ä–∞—É–Ω–¥ –±–∞—Ç–ª–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
        user_id = update.effective_user.id
        
        if not db.is_admin(user_id):
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞
        current_round = db.get_current_round()
        if current_round:
            await update.message.reply_text("‚ùå –£–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–∞—É–Ω–¥! –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /end_battle")
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ (–Ω–æ–º–µ—Ä 1)
        round_id = db.create_round(round_number=1)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = db.get_all_users()
        message_text = """
üî• –ù–∞—á–∞–ª—Å—è –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ —Ñ–æ—Ç–æ–±–∞—Ç–ª–∞!

üì∏ –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è —É—á–∞—Å—Ç–∏—è!
‚è± –°—Ä–æ—á–Ω–æ –∂–¥—É –ø–∞—Ä—É —Ñ–æ—Ç–æ–∫!!!!!!!
"""
        
        for user in users:
            try:
                await self.app.bot.send_message(chat_id=user['telegram_id'], text=message_text)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['telegram_id']}: {e}")
        
        await update.message.reply_text(f"‚úÖ –†–∞—É–Ω–¥ 1 –Ω–∞—á–∞—Ç! –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ç–æ –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
    
    async def next_round(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥ —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
        user_id = update.effective_user.id
        
        if not db.is_admin(user_id):
            return
        
        current_round = db.get_current_round()
        if not current_round:
            await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
        winners = db.get_round_winners(current_round['id'], min_votes=config.MIN_VOTES)
        
        if len(winners) < 2:
            await update.message.reply_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π! –ú–∏–Ω–∏–º—É–º 2 —Ñ–æ—Ç–æ —Å {config.MIN_VOTES}+ –≥–æ–ª–æ—Å–∞–º–∏."
            )
            return
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥
        db.end_round(current_round['id'])
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥
        next_round_number = current_round['number'] + 1
        new_round_id = db.create_round(round_number=next_round_number)
        
        # –ü—É–±–ª–∏–∫—É–µ–º –±–∞—Ç–ª—ã —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏
        await self.publish_battles_from_winners(new_round_id, winners)
        
        await update.message.reply_text(
            f"‚úÖ –†–∞—É–Ω–¥ {next_round_number} –Ω–∞—á–∞—Ç!\n"
            f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(winners)}\n"
            f"–ü–∞—Ä: {len(winners) // 2}"
        )
    
    async def publish_battles_from_winners(self, round_id: int, winners: list):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –±–∞—Ç–ª–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π"""
        import random
        random.shuffle(winners)
        
        for i in range(0, len(winners) - 1, 2):
            photo1 = winners[i]
            photo2 = winners[i + 1]
            
            battle_id = db.create_battle(round_id, photo1['id'], photo2['id'])
            await self.publish_battle(battle_id, photo1, photo2)
    
    async def publish_battle(self, battle_id: int, photo1: dict, photo2: dict):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –±–∞—Ç–ª–∞ –≤ –∫–∞–Ω–∞–ª"""
        keyboard = [
            [
                InlineKeyboardButton("‚óÄÔ∏è –õ–µ–≤–æ", callback_data=f"vote_{battle_id}_{photo1['id']}"),
                InlineKeyboardButton("–ü—Ä–∞–≤–æ ‚ñ∂Ô∏è", callback_data=f"vote_{battle_id}_{photo2['id']}")
            ],
            [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ —Å–µ–±—è", url=f"https://t.me/{config.BOT_USERNAME}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        caption = f"""
üî• –§–û–¢–û–ë–ê–¢–õ ‚Ññ{battle_id}

‚óÄÔ∏è –õ–µ–≤–æ: 0 –≥–æ–ª–æ—Å–æ–≤
–ü—Ä–∞–≤–æ ‚ñ∂Ô∏è: 0 –≥–æ–ª–æ—Å–æ–≤

–ì–æ–ª–æ—Å—É–π –∑–∞ –ª—É—á—à–µ–µ —Ñ–æ—Ç–æ!
"""
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            message = await self.app.bot.send_photo(
                chat_id=config.CHANNEL_ID,
                photo=photo1['file_id'],
                caption=caption,
                reply_markup=reply_markup
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ
            await self.app.bot.send_photo(
                chat_id=config.CHANNEL_ID,
                photo=photo2['file_id']
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞
            db.update_battle_message_id(battle_id, message.message_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–∞—Ç–ª–∞: {e}")
    
    async def end_battle(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –±–∞—Ç–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏ –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏"""
        user_id = update.effective_user.id
        
        if not db.is_admin(user_id):
            return
        
        current_round = db.get_current_round()
        if not current_round:
            await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
        winners = db.get_round_winners(current_round['id'], min_votes=config.MIN_VOTES)
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞—É–Ω–¥
        db.end_round(current_round['id'])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        result_text = f"üèÜ –§–æ—Ç–æ–±–∞—Ç–ª –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
        
        if winners:
            result_text += f"–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {len(winners)}\n\n"
            result_text += "–¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n"
            for idx, winner in enumerate(winners[:10], 1):
                username = winner.get('username', '–ê–Ω–æ–Ω–∏–º')
                result_text += f"{idx}. @{username} - {winner['votes']} –≥–æ–ª–æ—Å–æ–≤\n"
        else:
            result_text += "–ù–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ."
        
        await update.message.reply_text(result_text)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
        for winner in winners:
            try:
                await self.app.bot.send_message(
                    chat_id=winner['user_id'],
                    text=f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –ø—Ä–æ—à–µ–ª –≤ —Ñ–∏–Ω–∞–ª —Å {winner['votes']} –≥–æ–ª–æ—Å–∞–º–∏!"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—é: {e}")
    
    async def stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
        stats = db.get_bot_stats()
        
        stats_text = f"""
üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê:

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
üì∏ –í—Å–µ–≥–æ —Ñ–æ—Ç–æ: {stats['total_photos']}
‚öîÔ∏è –í—Å–µ–≥–æ –±–∞—Ç–ª–æ–≤: {stats['total_battles']}
üó≥ –í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤: {stats['total_votes']}
üëë –ê–¥–º–∏–Ω–æ–≤: {stats['total_admins']}
"""
        
        await update.message.reply_text(stats_text)
    
    async def add_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞"""
        user_id = update.effective_user.id
        
        if not db.is_admin(user_id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
        
        if not context.args:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_admin [telegram_id]")
            return
        
        try:
            new_admin_id = int(context.args[0])
            db.add_admin(new_admin_id)
            await update.message.reply_text(f"‚úÖ –ê–¥–º–∏–Ω {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω!")
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID!")
    
    async def remove_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞"""
        user_id = update.effective_user.id
        
        if not db.is_admin(user_id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
        
        if not context.args:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_admin [telegram_id]")
            return
        
        try:
            admin_id = int(context.args[0])
            db.remove_admin(admin_id)
            await update.message.reply_text(f"‚úÖ –ê–¥–º–∏–Ω {admin_id} —É–¥–∞–ª–µ–Ω!")
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID!")
    
    async def list_admins(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤"""
        user_id = update.effective_user.id
        
        if not db.is_admin(user_id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
        
        admins = db.get_all_admins()
        admin_list = "\n".join([f"‚Ä¢ {admin_id}" for admin_id in admins])
        
        await update.message.reply_text(f"üëë –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n\n{admin_list}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        self.app.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    bot = PhotoBattleBot()
    bot.run()
